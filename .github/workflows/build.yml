name: CI

on: [push]

jobs:
  prepare:
    name: 'Prepare'
    runs-on: ubuntu-latest
    env:
      YARN_CACHE_FOLDER: .yarn-cache
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/cache@v1
        with:
          path: .yarn-cache
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-cache-
      - run: yarn --frozen-lockfile
      - run: tar -czf dependencies.tar.gz node_modules
      - uses: actions/upload-artifact@v1
        with:
          name: dependencies
          path: dependencies.tar.gz

  lint-luacheck:
    needs: [prepare]
    name: 'Lint: LuaCheck'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: dependencies
          path: .
      - run: tar -xzf dependencies.tar.gz
      - uses: leafo/gh-actions-lua@v5
      - uses: leafo/gh-actions-luarocks@v2
      # Install LuaCheck
      - name: Install luacheck
        run: luarocks install luacheck
      - run: yarn lint:luacheck

  lint-code-style:
    needs: [prepare]
    name: 'Lint: Code Style'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: dependencies
          path: .
      - run: tar -xzf dependencies.tar.gz
      - run: yarn lint:prettier

  run:
    needs: [prepare]
    name: 'Run the code on ESP8266'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          eval "$(ssh-agent -s)"
          echo "$PRIVATE_KEY" | tr -d '\r' | ssh-add -
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      - run: |
          ssh-keyscan $SSH_DOMAIN >> ~/.ssh/known_hosts
          ssh ci@$SSH_DOMAIN -p $SSH_PORT ls
        env:
          SSH_DOMAIN: ${{ secrets.SSH_DOMAIN }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
